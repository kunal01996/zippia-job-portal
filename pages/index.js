import Head from 'next/head'
import Link from 'next/link'
import c from 'classnames'
import { useEffect, useState } from 'react'
import styles from '../styles/Home.module.css'
import Job from '../components/job'

import fetchJobsService from '../services'

export default function Home() {

  const [status, setStatus] = useState('UNINIT')
  const [error, setError] = useState('')
  const [jobTitle, setJobTitle] = useState('')
  const [published, setPublished] = useState('')
  const [viewBy, setViewBy] = useState('grid')
  const [jobs, setJobs] = useState([])

  const fetchJobs = () => {
    setStatus('IN_PROGRESS')
    fetchJobsService(jobTitle)
      .then(({ jobs }) => {
        setStatus('SUCCESS')
        setJobs(jobs)
      })
      .catch(e => {
        setStatus('ERROR')
        setError(e.message)
      })
  }

  useEffect(() => {
    fetchJobs()
  }, [])

  let body = <></>

  if (status === "IN_PROGRESS") {
    body = (
      <div className={`row ${styles.loaderContainer}`}>
        <div className="spinner-border text-secondary" role="status">
          <span className="visually-hidden">Loading...</span>
        </div>
      </div>
    )
  } else if (status === "SUCCESS") {
    body = jobs.length && jobs.filter((j) => {
      if (!published) {
        return true
      } else {
        return j.postedDate === published
      }
    }).length ? (
      <div className={c({
        "row row-cols-1 row-cols-sm-2 row-cols-md-3 g-3": viewBy === "grid",
        "row row-cols-1": viewBy !== "grid"
      })}>
        {
          jobs.filter((j) => {
            if (!published) {
              return true
            } else {
              return j.postedDate === published
            }
          }).map(j => (
            <Job data={j} key={j.jobId} viewBy={viewBy} />
          ))
        }
      </div>
    ) : (
      <div className="alert alert-info" role="alert">
        No jobs found!
      </div>
    )
  } else if (status === "ERROR") {
    body = (
      <div className="alert alert-danger" role="alert">
        {error}
      </div>
    )
  }

  return (
    <>
      <Head>
        <title>Zippia - Job Portal</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <nav className="navbar navbar-expand-md navbar-dark fixed-top bg-dark">
        <div className="container-fluid">
          <a className="navbar-brand" href="#">JOB PORTAL</a>
          <button className="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarCollapse" aria-controls="navbarCollapse" aria-expanded="false" aria-label="Toggle navigation">
            <span className="navbar-toggler-icon"></span>
          </button>
        </div>
      </nav>

      <main>

        <section className="py-5 text-center container">
          <div className="row py-lg-5">
            <div className="col-lg-6 col-md-8 mx-auto">
              <h1 className="fw-light">Zippia Job Portal</h1>
              <p className="lead text-muted">
                Find Exciting Jobs, Jobs that you like, you aspire to do. Meet exclusive employers from all over the world.
                This is the ultimate platform for Job Seekers like you. You career starts here and your search end here
              </p>
            </div>
          </div>
        </section>
        <div className="album py-5 bg-light">
          <div className="container">
            <form className="row g-3">
              <div className="col-sm-4">
                <label htmlFor="inputPassword2" className="visually-hidden">Search</label>
                <input type="text" className="form-control" id="inputPassword2" placeholder="Start with Companies, Title, salary etc..." value={jobTitle} onChange={(e) => setJobTitle(e.target.value)} />
              </div>
              <div className="col-auto">
                <button type="submit" className="btn btn-primary mb-3" onClick={() => fetchJobs()}>Search Jobs</button>
              </div>
              <div className="col-sm-2"></div>
              <div className="col-sm-4 pull-right">
                <div className="input-group mb-3">
                  <label className="input-group-text" htmlFor="inputGroupSelect01">Published</label>
                  <select className="form-select" id="inputGroupSelect01" onChange={(e) => setPublished(e.target.value)}>
                    <option selected value="">Choose...</option>
                    <option value="1h ago">1 hour ago</option>
                    <option value="10h ago">20 hours ago</option>
                    <option value="1d ago">1 day ago</option>
                    <option value="2d ago">2 days ago</option>
                    <option value="7d ago">7 days ago</option>
                    <option value="10d ago">10 days ago</option>
                  </select>
                  <button className={c({
                    "btn btn-secondary": viewBy === "grid",
                    "btn btn-outline-secondary": viewBy !== "grid"
                  })} type="button" style={{ marginLeft: '5%' }} onClick={() => setViewBy('grid')}><i className="bi bi-grid"></i></button>
                  <button className={c({
                    "btn btn-secondary": viewBy === "list",
                    "btn btn-outline-secondary": viewBy !== "list"
                  })} type="button" onClick={() => setViewBy('list')}><i className="bi bi-list"></i></button>
                </div>
              </div>
            </form>
            {body}
          </div>
        </div>
      </main>

      <footer className="text-muted py-5">
        <div className="container">
          <p className="float-end mb-1">
            <Link href="#">
              <a>Back to top</a>
            </Link>
          </p>
          <p className="mb-1">Job Portal &copy; Zippia!</p>
        </div>
      </footer>
    </>

  )
}
